class TopologicalSort {
  public static List<Integer> sort(int vertices, int[][] edges) {
    List<Integer> sortedOrder = new ArrayList<>();
    // TODO: Write your code here
  // create graph
  Mpa<Integer, List<Integer>> graph = new HashMap<>();
  Map<Integer, Integer> inDegree = new HashMap<>();

  for(int i=0;i<vertices;i++){
  graph.put(i, new ArrayList<>());
  inDegree(i,0);
  }


for(int [] edge : edges){
int u =edge[0];
int v = edge[1];
graph.get(u).add(v);
inDegree.put(v, inDegree.get(v)+1);
}

// find all sources i.e vertices with zero indegrees
Queue<Integer> sources = new ArrayDeque<>();
for(Map.Entry<Integer, Integer> entry : inDegree.enrtySet())
{
if(entry.getValue()==0)
sources.add(entry.getKey());
}

while(!sources.isEmpty()){
int vertex = source.poll();
sortedOrder.add(vertex);
List<Integer> children = graph.get(vertex);
for(int child: children){
inDegree.put(child, inDegree.get(child)-1);
if(inDegree.get(child)==0)
sources.add(child);
}

}


// check if topo sort is possible or not
if(sortedOrder.size!=vertices)
return new ArrayList<>();

    return sortedOrder;
  }

  List<List<Integer>> helperSort(int vertices, int[][] edges){


  // do a dfs and once you reach the bottom means all children explored


  for(int i=0; i<n;i++){


  }


  }



  }




  public static void main(String[] args) {
    List<Integer> result = TopologicalSort.sort(4,
        new int[][] { new int[] { 3, 2 }, new int[] { 3, 0 }, new int[] { 2, 0 }, new int[] { 2, 1 } });
    System.out.println(result);

    result = TopologicalSort.sort(5, new int[][] { new int[] { 4, 2 }, new int[] { 4, 3 }, new int[] { 2, 0 },
        new int[] { 2, 1 }, new int[] { 3, 1 } });
    System.out.println(result);

    result = TopologicalSort.sort(7, new int[][] { new int[] { 6, 4 }, new int[] { 6, 2 }, new int[] { 5, 3 },
        new int[] { 5, 4 }, new int[] { 3, 0 }, new int[] { 3, 1 }, new int[] { 3, 2 }, new int[] { 4, 1 } });
    System.out.println(result);
  }
}
